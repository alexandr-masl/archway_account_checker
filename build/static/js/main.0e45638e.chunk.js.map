{"version":3,"sources":["logo.svg","chain.info.constantine.js","components/get_balance.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","ConstantineInfo","chainId","chainName","rpc","rest","stakeCurrency","coinDenom","coinMinimalDenom","coinDecimals","bip44","coinType","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","feeCurrencies","gasPriceStep","low","average","high","faucets","features","RPC","initialState","name","Get_Balance_Form","props","_useState","useState","_useState2","Object","slicedToArray","_useState2$","setState","email","message","_useState3","_useState4","form_is_submited","setFormState","_useState5","_useState6","balance_responce","checkBalance","handleSubmit","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","e","cosm_wasm_client","_is_submited_switching","_balance","_chain_id","_account","account_info","wrap","_context","prev","next","preventDefault","CosmWasmClient","connect","sent","getBalance","getChainId","getAccount","balance","amount","toString","chain_id","acc_number","accountNumber","address","pubkey_type","pubkey","type","pubkey_value","value","t0","err","stop","_x","apply","this","arguments","initial_form","react_default","createElement","id","className","validate","onSubmit","placeholder","required","onChange","_e$target","target","prevState","objectSpread","defineProperty","submited_form_err","submited_form_success","ContractAddress","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","connectWallet","offlineSigner","cwClient","accounts","queryHandler","gasPrice","userAddress","counter","console","log","window","keplr","experimentalSuggestChain","state","chainMeta","enable","getOfflineSigner","SigningCosmWasmClient","connectWithSigner","getAccounts","queryClient","wasm","queryContractSmart","GasPrice","fromString","client","getCount","isNaN","count","warn","error","_callee2","loading","entrypoint","query","_context2","status","msg","loadingStatus","loadingMsg","get_count","contract","abrupt","incrementCounter","_callee3","txFee","tx","_context3","increment","calculateFee","senderAddress","contractAddress","fee","execute","logs","length","timestamp","Date","getTime","JSON","stringify","concat","toConsumableArray","resetCounter","_callee4","_context4","reset","logMeta","i","logItem","parse","meta","push","logItems","map","key","src","logo","alt","onClick","get_balance_Get_Balance_Form","Loading","Component","reportWebVitals","onPerfEntry","Function","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.0e45638e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a3b68a90.svg\";","export const ConstantineInfo = {\n  // Chain-id of the Cosmos SDK chain.\n  chainId: \"constantine-1\",\n  // The name of the chain to be displayed to the user.\n  chainName: \"Constantine Testnet\",\n  // RPC endpoint of the chain.\n  rpc: \"https://rpc.constantine-1.archway.tech\" ,\n  // REST endpoint of the chain.\n  rest: \"https://api.constantine-1.archway.tech\",\n  // Staking coin information\n  stakeCurrency: {\n    // Coin denomination to be displayed to the user.\n    coinDenom: \"CONST\",\n    // Actual denom (i.e. uatom, uscrt) used by the blockchain.\n    coinMinimalDenom: \"uconst\",\n    // # of decimal points to convert minimal denomination to user-facing denomination.\n    coinDecimals: 6,\n    // (Optional) Keplr can show the fiat value of the coin if a coingecko id is provided.\n    // You can get id from https://api.coingecko.com/api/v3/coins/list if it is listed.\n    // coinGeckoId: \"\"\n\t},\n  // (Optional) If you have a wallet webpage used to stake the coin then provide the url to the website in `walletUrlForStaking`.\n  // The 'stake' button in Keplr extension will link to the webpage.\n  // walletUrlForStaking: \"\",\n  // The BIP44 path.\n  bip44: {\n    // You can only set the coin type of BIP44.\n    // 'Purpose' is fixed to 44.\n    coinType: 118,\n  },\n  // Bech32 configuration to show the address to user.\n  // This field is the interface of\n  // {\n  //   bech32PrefixAccAddr: string;\n  //   bech32PrefixAccPub: string;\n  //   bech32PrefixValAddr: string;\n  //   bech32PrefixValPub: string;\n  //   bech32PrefixConsAddr: string;\n  //   bech32PrefixConsPub: string;\n  // }\n  bech32Config: {\n    bech32PrefixAccAddr: \"archway\",\n    bech32PrefixAccPub: \"archwaypub\",\n    bech32PrefixValAddr: \"archwayvaloper\",\n    bech32PrefixValPub: \"archwayvaloperpub\",\n    bech32PrefixConsAddr: \"archwayvalcons\",\n    bech32PrefixConsPub: \"archwayvalconspub\"\n  },\n  // List of all coin/tokens used in this chain.\n  currencies: [{\n    // Coin denomination to be displayed to the user.\n    coinDenom: \"CONST\",\n    // Actual denom (i.e. uatom, uscrt) used by the blockchain.\n    coinMinimalDenom: \"uconst\",\n    // # of decimal points to convert minimal denomination to user-facing denomination.\n    coinDecimals: 6,\n    // (Optional) Keplr can show the fiat value of the coin if a coingecko id is provided.\n    // You can get id from https://api.coingecko.com/api/v3/coins/list if it is listed.\n    // coinGeckoId: \"\"\n  }],\n  // List of coin/tokens used as a fee token in this chain.\n  feeCurrencies: [{\n    // Coin denomination to be displayed to the user.\n    coinDenom: \"CONST\",\n    // Actual denom (i.e. uatom, uscrt) used by the blockchain.\n    coinMinimalDenom: \"uconst\",\n    // # of decimal points to convert minimal denomination to user-facing denomination.\n    coinDecimals: 6,\n    // (Optional) Keplr can show the fiat value of the coin if a coingecko id is provided.\n    // You can get id from https://api.coingecko.com/api/v3/coins/list if it is listed.\n    // coinGeckoId: \"\"\n  }],\n  // (Optional) The number of the coin type.\n  // This field is only used to fetch the address from ENS.\n  // Ideally, it is recommended to be the same with BIP44 path's coin type.\n  // However, some early chains may choose to use the Cosmos Hub BIP44 path of '118'.\n  // So, this is separated to support such chains.\n  coinType: 118,\n  // (Optional) This is used to set the fee of the transaction.\n  // If this field is not provided, Keplr extension will set the default gas price as (low: 0.01, average: 0.025, high: 0.04).\n  // Currently, Keplr doesn't support dynamic calculation of the gas prices based on on-chain data.\n  // Make sure that the gas prices are higher than the minimum gas prices accepted by chain validators and RPC/REST endpoint.\n  gasPriceStep: {\n    low: 0,\n    average: 0.1,\n    high: 0.2\n  },\n  faucets: [\"https://faucet.constantine-1.archway.tech\"],\n  features: ['cosmwasm']\n};","import React from 'react'\nimport { useState } from 'react'\n// init(\"user_sklvQNCX9AIjZ1VyPrKoJ\");\n\nimport { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { calculateFee, coin, GasPrice } from \"@cosmjs/stargate\";\nimport { ConstantineInfo } from '../chain.info.constantine';\n\nimport {CosmWasmClient} from \"@cosmjs/cosmwasm-stargate\"\n\nconst RPC = ConstantineInfo.rpc;\n\nconst initialState = {\n  name: '',\n  // email: '',\n  // message: '',\n}\n\n\nexport const Get_Balance_Form = (props) => {\n\n  const [{ name, email, message }, setState] = useState(initialState)\n  const [form_is_submited, setFormState] = useState(false)\n  const [balance_responce, checkBalance] = useState({})\n\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n\n    setState((prevState) => ({ ...prevState, [name]: value }))\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n\n    let cosm_wasm_client = await CosmWasmClient.connect(RPC);\n    const _is_submited_switching = form_is_submited ? false : true\n \n    const coin = \"uconst\"\n\n    try { \n\n      const _balance = await cosm_wasm_client.getBalance(name, coin) \n      const _chain_id = await cosm_wasm_client.getChainId()\n      const _account = await cosm_wasm_client.getAccount(name)\n\n      const account_info ={\n\n        balance: _balance.amount.toString(),\n        chain_id: _chain_id.toString(),\n        acc_number: _account.accountNumber,\n        address: _account.address,\n        pubkey_type: _account.pubkey.type,\n        pubkey_value: _account.pubkey.value,\n      }\n\n      checkBalance(account_info)\n  \n    } catch(err){ \n      \n      checkBalance({err: \"Account not found..\"})\n    }\n\n    setFormState(_is_submited_switching)\n  }\n\n  const initial_form = (\n    <div>\n      <div id='contact'>\n        <div className='container'>\n          <div className='col-md-8'>\n            <div className='row'>\n              <div className='section-title'>\n                <h2>Check Account INFO</h2>\n              </div>\n              <form name='sentMessage' validate onSubmit={handleSubmit}>\n                <div className='row'>\n                  <div className='col-md-6'>\n                    <div className='form-group'>\n                      <input\n                        type='text'\n                        id='name'\n                        name='name'\n                        className='form-control'\n                        placeholder='Input Account Adress'\n                        required\n                        onChange={handleChange}\n                      />\n                      <p className='help-block text-danger'></p>\n                    </div>\n                  </div>\n                 \n                </div>\n          \n                <div id='success'></div>\n                <button type='submit' className='btn btn-custom btn-lg'>\n                  Check Balance\n                </button>\n              </form>\n            </div>\n          </div>\n         \n        </div>\n      </div>\n    </div>\n  )\n\n  const submited_form_err = (\n    <div>\n      <div id='contact'>\n        <div className='container'>\n          <div className='col-md-8'>\n            <div className='row'>\n              <div className='section-title'>\n                <h2> Account Info</h2>\n                {balance_responce.err}\n              </div>\n              <form name='sentMessage' validate onSubmit={handleSubmit}>\n                <button type='submit' className='btn btn-custom btn-lg'>\n                  Check another account\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n\n  const submited_form_success = (\n    <div>\n      <div id='contact'>\n        <div className='container'>\n          <div className='col-md-8'>\n            <div className='row'>\n              <div className='section-title'>\n                <h2> Account Info</h2>\n                <h3>\n                  Account Number: {balance_responce.acc_number}\n                </h3>\n                <p>\n                  Adress: {balance_responce.address}\n                </p>\n                <p>\n                  Balance UCONST: {balance_responce.balance}\n                </p>\n                <p>\n                  Chain ID: {balance_responce.chain_id}\n                </p>\n                <p>\n                  Public key type: {balance_responce.pubkey_type}\n                </p>\n                <p>\n                  Public key value: {balance_responce.pubkey_value}\n                </p>\n              </div>\n              <form name='sentMessage' validate onSubmit={handleSubmit}>\n                <button type='submit' className='btn btn-custom btn-lg'>\n                  Check another account\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n\n  if (form_is_submited){\n\n    if (balance_responce.err)\n      return submited_form_err\n    else \n      return submited_form_success\n  }\n  else \n    return initial_form\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Get_Balance_Form } from \"./components/get_balance\";\n\nimport { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { calculateFee, GasPrice } from \"@cosmjs/stargate\";\nimport { ConstantineInfo } from './chain.info.constantine';\n\n\nconst RPC = ConstantineInfo.rpc;\n// const ContractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n\nconst ContractAddress = \"archway1lkrpk8laquyrtfzp9w0wtzy99qhmpm5zx4mjcmk525pwrd9lrpyq7rtrfe\";\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contract: ContractAddress,\n      counter: null,\n      cwClient: null,\n      offlineSigner: null,\n      chainMeta: ConstantineInfo,\n      gasPrice: null,\n      queryHandler: null,\n      loadingStatus: false,\n      loadingMsg: \"\",\n      logs: [],\n      rpc: RPC,\n      accounts: null,\n      userAddress: null\n    };\n  };\n\n  /**\n   * Instances basic settings\n   * @see {File} ./.env\n   * @see {File} ./env.example\n   * @see https://create-react-app.dev/docs/adding-custom-environment-variables/\n   */\n   connectWallet = async () => {\n    console.log('Connecting wallet...');\n      try {\n        if (window) {\n          if (window['keplr']) {\n            if (window.keplr['experimentalSuggestChain']) {\n              await window.keplr.experimentalSuggestChain(this.state.chainMeta)\n              await window.keplr.enable(this.state.chainMeta.chainId);              \n              let offlineSigner = await window.getOfflineSigner(this.state.chainMeta.chainId);\n              console.log('offlineSigner', offlineSigner);\n\n              let cwClient = await SigningCosmWasmClient.connectWithSigner(this.state.rpc, offlineSigner);\n              let accounts = await offlineSigner.getAccounts();\n              let queryHandler = cwClient.queryClient.wasm.queryContractSmart;\n              let gasPrice = GasPrice.fromString('0.002uconst');\n              let userAddress = accounts[0].address;\n\n              // Update state\n              this.setState({\n                accounts: accounts,\n                userAddress: userAddress,\n                cwClient: cwClient,\n                queryHandler: queryHandler,\n                gasPrice: gasPrice,\n                offlineSigner: offlineSigner\n              });\n\n              // Debug\n              console.log('dApp Connected', {\n                accounts: this.state.accounts,\n                userAddress: this.state.userAddress,\n                client: this.state.cwClient,\n                queryHandler: this.state.queryHandler,\n                gasPrice: this.state.gasPrice,\n                offlineSigner: this.state.offlineSigner\n              });\n\n              // Get count\n              let counter = await this.getCount();\n              try {\n                if (!isNaN(counter.count)) {\n                  this.setState({ counter: counter.count });\n                } else {\n                  console.warn('Error expected numeric value from counter, found: ', typeof counter.count);\n                }\n              } catch (e) {\n                console.warn('Error: failed getting counter value', e);\n              }\n            } else {\n              console.warn('Error access experimental features, please update Keplr');\n            }\n          } else {\n            console.warn('Error accessing Keplr');\n          }\n        } else {\n          console.warn('Error parsing window object');\n        }\n      } catch (e) {\n        console.error('Error connecting to wallet', e);\n      }\n  }\n\n  /**\n   * Query contract counter\n   * @see {SigningCosmWasmClient}\n   * @see https://github.com/drewstaylor/archway-template/blob/main/src/contract.rs#L66-L71\n   */\n  getCount = async () => {\n    // SigningCosmWasmClient.query: async (address, query)\n    let loading;\n    loading = {\n      status: true,\n      msg: \"Refreshing counter...\"\n    };\n    this.setState({\n      loadingStatus: loading.status,\n      loadingMsg: loading.msg\n    });\n    let entrypoint = {\n      get_count: {}\n    };\n    let query = await this.state.queryHandler(this.state.contract, entrypoint);\n    loading = {\n      status: false,\n      msg: \"\"\n    };\n    this.setState({\n      loadingStatus: loading.status,\n      loadingMsg: loading.msg\n    });\n    console.log('Counter Queried', query);\n    return query;\n  }\n\n  /**\n   * Increment the counter\n   * @see {SigningCosmWasmClient}\n   * @see https://github.com/drewstaylor/archway-template/blob/main/src/contract.rs#L42\n   */\n  incrementCounter = async () => {\n    // SigningCosmWasmClient.execute: async (senderAddress, contractAddress, msg, fee, memo = \"\", funds)\n    if (!this.state.accounts) {\n      console.warn('Error getting accounts', this.state.accounts);\n      return;\n    } else if (!this.state.userAddress) {\n      console.warn('Error getting user address', this.state.userAddress);\n      return;\n    }\n    let loading;\n    loading = {\n      status: true,\n      msg: \"Incrementing counter...\"\n    };\n    this.setState({ \n      loadingStatus: loading.status,\n      loadingMsg: loading.msg\n    });\n    // Prepare Tx\n    let entrypoint = {\n      increment: {}\n    };\n    let txFee = calculateFee(300000, this.state.gasPrice); // XXX TODO: Fix gas estimation (https://github.com/cosmos/cosmjs/issues/828)\n    console.log('Tx args', {\n      senderAddress: this.state.userAddress, \n      contractAddress: this.state.contract, \n      msg: entrypoint, \n      fee: txFee\n    });\n    // Send Tx\n    try {\n      let tx = await this.state.cwClient.execute(this.state.userAddress, this.state.contract, entrypoint, txFee);\n      console.log('Increment Tx', tx);\n      // Update Logs\n      if (tx.logs) {\n        if (tx.logs.length) {\n          tx.logs[0].type = 'increment';\n          tx.logs[0].timestamp = new Date().getTime();\n          this.setState({\n            logs: [JSON.stringify(tx.logs, null, 2), ...this.state.logs]\n          });\n        }\n      }\n      // Refresh counter\n      let counter = await this.getCount();\n      let count;\n      if (!isNaN(counter.count)) {\n        count = counter.count;\n      } else {\n        count = this.state.counter;\n        console.warn('Error expected numeric value from counter, found: ', typeof counter.count);\n      }\n      // Render updates\n      loading = {\n        status: false,\n        msg: \"\"\n      };\n      this.setState({\n        counter: count,\n        loadingStatus: loading.status,\n        loadingMsg: loading.msg\n      });\n    } catch (e) {\n      console.warn('Error exceuting Increment', e);\n      loading = {\n        status: false,\n        msg: \"\"\n      };\n      this.setState({\n        loadingStatus: loading.status,\n        loadingMsg: loading.msg\n      });\n    }\n  }\n\n  /**\n   * Reset counter to 0\n   * @see {SigningCosmWasmClient}\n   * @see https://github.com/drewstaylor/archway-template/blob/main/src/contract.rs#L43\n   */\n  resetCounter = async () => {\n    // SigningCosmWasmClient.execute: async (senderAddress, contractAddress, msg, fee, memo = \"\", funds)\n    if (!this.state.accounts) {\n      console.warn('Error getting user account', this.state.accounts);\n      return;\n    } else if (!this.state.userAddress) {\n      console.warn('Error getting user address', this.state.userAddress);\n      return;\n    }\n    let loading;\n    loading = {\n      status: true,\n      msg: \"Resetting counter...\"\n    };\n    this.setState({\n      loadingStatus: loading.status,\n      loadingMsg: loading.msg\n    });\n    // Prepare Tx\n    let entrypoint = {\n      reset: {\n        count: 0\n      }\n    };\n    let txFee = calculateFee(300000, this.state.gasPrice); // XXX TODO: Fix gas estimation (https://github.com/cosmos/cosmjs/issues/828)\n    // Send Tx\n    try {\n      let tx = await this.state.cwClient.execute(this.state.userAddress, this.state.contract, entrypoint, txFee);\n      console.log('Reset Tx', tx);\n      // Update Logs\n      if (tx.logs) {\n        if (tx.logs.length) {\n          tx.logs[0].type = 'reset';\n          tx.logs[0].timestamp = new Date().getTime();\n          this.setState({\n            logs: [JSON.stringify(tx.logs, null, 2), ...this.state.logs]\n          });\n        }\n      }\n      // Refresh counter\n      let counter = await this.getCount();\n      let count;\n      if (!isNaN(counter.count)) {\n        count = counter.count;\n      } else {\n        count = this.state.counter;\n        console.warn('Error expected numeric value from counter, found: ', typeof counter.count);\n      }\n      // Render updates\n      loading = {\n        status: false,\n        msg: \"\"\n      };\n      this.setState({\n        counter: count,\n        loadingStatus: loading.status,\n        loadingMsg: loading.msg\n      });\n    } catch (e) {\n      console.warn('Error executing Reset', e);\n      loading = {\n        status: false,\n        msg: \"\"\n      };\n      this.setState({\n        loadingStatus: loading.status,\n        loadingMsg: loading.msg\n      });\n    }\n  }\n\n  render() {\n    // State\n    const counter = this.state.counter;\n    const loadingMsg = this.state.loadingMsg;\n    const userAddress = this.state.userAddress;\n\n    // Maps\n    let logMeta = [];\n\n    for (let i = 0; i < this.state.logs.length; i++) {\n      let logItem = JSON.parse(this.state.logs[i]);\n      let meta = {\n        type: logItem[0].type,\n        timestamp: logItem[0].timestamp\n      };\n      logMeta.push(meta);\n    }\n    const logItems = (this.state.logs.length) ? this.state.logs.map((log,i) =>\n      <div key={logMeta[i].timestamp}>\n        <p className=\"label\">\n          <strong><span>Counter {(logMeta[i].type === 'increment') ? 'Incremented' : 'Reset' }&nbsp;</span>({logMeta[i].timestamp}):</strong>\n        </p>\n        <pre className=\"log-entry\" key={i}>{log}</pre>\n      </div>\n    ) : null;\n\n    // Not Connected\n    if (!userAddress) {\n      return (\n        <div className=\"content\">\n          <img src={logo} alt=\"logo\" />\n\n          <div className=\"button-controls\">\n            <button id=\"connect\" className=\"btn btn-main\" onClick={this.connectWallet}>Connect Wallet</button>\n          </div>\n          <div>\n            <Get_Balance_Form />\n          </div>\n\n        </div>\n      );\n    }\n\n    // Connected\n    return (\n      <div className=\"content\">\n        <img src={logo} alt=\"logo\" />\n\n        {/* Counter Status Display */}\n        <div className=\"status-display\">\n          <ul className=\"status\">\n            <li className=\"counter\"><strong>Counter:</strong>&nbsp;{counter}</li>\n          </ul>\n        </div>\n\n        {/* Controls */}\n        <div className=\"button-controls\">\n          <button id=\"incrementer\" className=\"btn btn-main\" onClick={this.incrementCounter}>Increment Counter</button>\n          <button id=\"resetter\" className=\"btn btn-alt\" onClick={this.resetCounter}>Reset Counter</button>\n        </div>\n        <div>\n          <Get_Balance_Form />\n        </div>\n\n        {/* Loading */}\n        {Loading(loadingMsg)}\n\n        {/* Logs map */}\n        <div className=\"logs\">\n          <div>{logItems}</div>\n        </div>\n\n      </div>\n    );\n  };\n\n}\n\n// Conditional rendering\nfunction Loading(msg) {\n  if (!msg) {\n    return;\n  }\n  return (\n    <div className=\"loading\">\n      <p>{msg}</p>\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}